name: AMD64 Build
on: [push, pull_request]

jobs:
  windows_debug:
    runs-on: windows-latest
    env:
      BUILD_TYPE: Debug
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.11.0
        with:
          arch: x86
#          arch: x64
      - uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Get processor arch
        run: echo "PROCESSOR_ARCH=$Env:PROCESSOR_ARCHITECTURE" | out-file -FilePath $Env:GITHUB_ENV -Encoding utf-8 -append

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build
      - name: Get Submodule Info
        id: get-submodule-info
        run: git ls-remote https://github.com/dev-osrose/packets HEAD > ${{github.workspace}}/submodule_info
      - name: Cache 3rdparty builds
        uses: actions/cache@v2
        with:
          path: |
            ${{github.workspace}}/build/3rdparty/bin
            ${{github.workspace}}/build/3rdparty/lib
            ${{github.workspace}}/build/3rdparty/include
          key: ${{ runner.os }}-${{env.BUILD_TYPE}}-${{ hashFiles('submodule_info') }}

      - name: Configure CMake
        working-directory: ${{github.workspace}}/build
        run: cmake ${{github.workspace}} -GNinja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: cmake --build . --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Archive build
        working-directory: ${{github.workspace}}/build/bin
        run: tar.exe --exclude='*.pdb' --exclude='./symbols' --exclude='./unity' -cf ${{github.workspace}}/windows_debug_build.zip *

      - name: Upload windows build
        uses: actions/upload-artifact@v2
        with:
          name: windows_debug_build
          path: ${{github.workspace}}/windows_debug_build.zip
      - name: Upload windows pdbs
        uses: actions/upload-artifact@v2
        with:
          name: windows_debug_pdbs
          path: |
            ${{github.workspace}}/build/bin/*.pdb


  windows_release:
    runs-on: windows-latest
    env:
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.11.0
        with:
          arch: x86
#          arch: x64
      - uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Get processor arch
        run: echo "PROCESSOR_ARCH=$Env:PROCESSOR_ARCHITECTURE" | out-file -FilePath $Env:GITHUB_ENV -Encoding utf-8 -append

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Get Submodule Info
        id: get-submodule-info
        run: git ls-remote https://github.com/dev-osrose/packets HEAD > ${{github.workspace}}/submodule_info

      - name: Cache 3rdparty builds
        uses: actions/cache@v2
        with:
          path: |
            ${{github.workspace}}/build/3rdparty/bin
            ${{github.workspace}}/build/3rdparty/lib
            ${{github.workspace}}/build/3rdparty/include
          key: ${{ runner.os }}-${{env.BUILD_TYPE}}-${{ hashFiles('submodule_info') }}

      - name: Configure CMake
        working-directory: ${{github.workspace}}/build
        run: cmake ${{github.workspace}} -GNinja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: cmake --build . --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Archive build
        working-directory: ${{github.workspace}}/build/bin
        run: tar.exe --exclude='*.pdb' --exclude='*.lib' --exclude='./symbols' --exclude='./unity' -cf ${{github.workspace}}/windows_release_build.zip *

      - name: Upload windows build
        uses: actions/upload-artifact@v2
        with:
          name: windows_release_build
          path: ${{github.workspace}}/windows_release_build.zip
      - name: Upload windows pdbs
        uses: actions/upload-artifact@v2
        with:
          name: windows_release_pdbs
          path: |
            ${{github.workspace}}/build/bin/*.pdb

  deploy:
    runs-on: ubuntu-latest
    needs: [ windows_release ]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Release Changelog Builder
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v2.0.0
        with:
          configuration: ".github/config/configuration.json"
          commitMode: ${{ !startsWith(github.ref, 'refs/tags/') }}
          ignorePreReleases: ${{ !contains(github.ref, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download windows build
        id: build_download
        uses: actions/download-artifact@v2.0.10
        with:
          name: windows_release_build

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1.8.6
        with:
          prerelease: ${{ contains(github.event.inputs.version, '-rc') || contains(github.event.inputs.version, '-b') || contains(github.event.inputs.version, '-a') }}
          allowUpdates: true
          replacesArtifacts: true
          omitNameDuringUpdate: true
          body: ${{steps.build_changelog.outputs.changelog}}
          name: v1.1.6.${{ github.run_number }}
          artifacts: "windows_release_build.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Pre-Release
#        if: ${{ github.ref == 'refs/heads/main' }}
#        uses: ncipollo/release-action@v1.8.6
#        with:
#          prerelease: true
#          allowUpdates: true
#          replacesArtifacts: true
#          omitBodyDuringUpdate: true
#          omitNameDuringUpdate: true
#          commit: ${{ github.sha }}
#          body: ${{steps.build_changelog.outputs.changelog}}
#          tag: v1.1.6.${{ github.run_number }}-a
#          artifacts: "windows_release_build.zip"
#          token: ${{ secrets.GITHUB_TOKEN }}
